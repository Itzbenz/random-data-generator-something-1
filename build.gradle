import java.nio.file.Files
import java.nio.file.StandardOpenOption

buildscript {

    repositories {//more than you need
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}
//allprojects {

apply plugin: 'java'
apply plugin: 'java-library'
//for multiproject build to include in the jar
apply plugin: 'application'
group 'io.itzbenz'
version '1.0'
try {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
} catch (e) {

}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url 'https://jitpack.io' }
}

ext {

    atomModule = { String module ->
        boolean b = new File(rootDir, '../Atom').exists()
        //b = false
        if (b) {
            return project(":Atom" + module)
        } else {
            return "com.github.o7-Fire.Atomic-Library$module:$atomHash"
        }
    }
    aproj = { String module ->
        if (findProject(module) != null) {
            return project(module)
        } else {
            return project(":" + modsNname + module)
        }
    }

    try {

        System.properties.load(new FileReader(new File(rootDir, "gradle.properties")))
        System.properties.load(new FileReader(new File(rootDir, "local.properties")))
    } catch (s) {
        //println s
    }

}

test {
    useJUnitPlatform()
}
//From Root to every project
dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    compileOnly group: 'org.jetbrains', name: 'annotations', version: '21.0.1'

}
tasks.withType(Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]//what is this lol

    options.forkOptions.jvmArgs.addAll([
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
    ])
}

//}
//what this
//apply plugin: 'java'
//apply plugin: 'java-library'

//cool
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

//group 'io.itzbenz'
//ersion '1.0'


ext {
    File props = new File(projectDir, 'gradle.properties')
    if (!props.exists())
        props.createNewFile()
    File atom = new File(projectDir, '../Atom')
    if (atom.exists() && props.exists()) {
        String s = new String(Runtime.getRuntime().exec("git rev-parse HEAD", new String[0], atom).getInputStream().readAllBytes()).trim()
        if (!s.equals(atomHash)) {
            Properties properties = new Properties()
            StringWriter writer = new StringWriter()
            properties.load(props.toURI().toURL().openStream())
            properties.put("atomHash", s)
            properties.store(writer, "Touch")
            Files.writeString(props.toPath(), writer.getBuffer().toString(), StandardOpenOption.WRITE)
            atomHash = s
        }
    }
}
//cool
//source code documentation instead of decompiled .class, if you use jitpack that is
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'//deprecated, what the replacement ?
    from sourceSets.main.allSource
}
//need this for jitpack, so i can read mods source code without using browser
artifacts {
    archives sourcesJar
}
def urlFile = { url ->
    String name = url.substring(url.lastIndexOf('/') + 1)
    File file = new File("$buildDir/download/${name}")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }
    }
    files(file.absolutePath)
}
dependencies {
    implementation(atomModule(":Atomic"))
}
//for some ridiculous reason, it stopped working if local Atom present, rename it first
task doingYourJar(type: Jar) {
    archiveName(project.name+".jar")
    manifest {
        attributes(
                'Main-Class': 'Saddad'
        )
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from {
        configurations.runtimeClasspath.collect {
            //it.exists() ?
            it.isDirectory() ? it : zipTree(it)
            //        : null
        }
    }
    //somehow it broke without this
    with jar
}
task deploy{
    dependsOn doingYourJar
}

//https://stackoverflow.com/questions/32088966/gradle-generated-startscript-for-windows-produces-input-line-is-too-long
startScripts {
    doLast {
        def winScriptFile = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText
    }
}